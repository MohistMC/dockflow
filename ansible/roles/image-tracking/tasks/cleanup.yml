---
- name: Get configuration for number of versions to keep
  set_fact:
    keep_healthy_versions: "{{ deployment_config.image_management.keep_healthy_versions | default(1) | int }}"
  when: deployment_config is defined and deployment_config.image_management is defined

- name: Set default if not configured
  set_fact:
    keep_healthy_versions: 1
  when: keep_healthy_versions is not defined

- name: Get all tracked healthy image files for this environment, project and branch
  find:
    paths: /var/lib/dockflow/images
    patterns: "{{ env }}_{{ project_id }}_{{ sanitized_branch_name }}_*.json"
  register: healthy_image_files

- name: Sort and determine versions to keep/remove
  set_fact:
    sorted_healthy_files: "{{ healthy_image_files.files | sort(attribute='mtime', reverse=true) }}"
    versions_to_keep: "{{ (healthy_image_files.files | sort(attribute='mtime', reverse=true))[:keep_healthy_versions | int] }}"
    versions_to_remove: "{{ (healthy_image_files.files | sort(attribute='mtime', reverse=true))[keep_healthy_versions | int:] }}"

- name: Display version management plan
  debug:
    msg: |
      Image Management Configuration:
      - Keep healthy versions: {{ keep_healthy_versions }}
      - Total tracked versions: {{ sorted_healthy_files | length }}
      - Versions to keep: {{ versions_to_keep | length }}
      - Versions to remove: {{ versions_to_remove | length }}
  when: not global_no_log

- name: Extract images from versions to keep
  set_fact:
    protected_images: []

- name: Build list of protected images from versions to keep
  block:
    - name: Read each version file to keep
      slurp:
        src: "{{ item.path }}"
      register: protected_version_content
      loop: "{{ versions_to_keep }}"
      loop_control:
        label: "{{ item.path | basename }}"

    - name: Extract image names from protected versions
      set_fact:
        protected_images: "{{ protected_images + (item.content | b64decode | from_json).images | map(attribute='name') | list }}"
      loop: "{{ protected_version_content.results }}"
      when: item.content is defined
      loop_control:
        label: "{{ (item.content | b64decode | from_json).version | default('unknown') }}"

- name: Get all images on system
  command: docker images --format "{{'{{'}}.Repository{{'}}'}}:{{'{{'}}.Tag{{'}}'}}"
  register: all_docker_images
  changed_when: false

- name: Filter images to delete (not in protected list and not 'latest' tag)
  set_fact:
    images_to_delete: "{{ all_docker_images.stdout_lines | reject('in', protected_images) | reject('search', ':latest$') | list }}"

- name: Display cleanup plan
  debug:
    msg: |
      Cleanup Plan:
      - Total images on system: {{ all_docker_images.stdout_lines | length }}
      - Protected images (from {{ versions_to_keep | length }} versions): {{ protected_images | length }}
      - Images to delete: {{ images_to_delete | length }}
      {% if protected_images | length > 0 %}
      
      Protected images:
      {% for image in protected_images %}
      - {{ image }}
      {% endfor %}
      {% endif %}
      {% if images_to_delete | length > 0 %}
      
      Images to delete:
      {% for image in images_to_delete %}
      - {{ image }}
      {% endfor %}
      {% endif %}
  when: not global_no_log

- name: Skip deletion if no protected images were found (safe-guard)
  debug:
    msg: "No protected images found for this environment; skipping image deletion to avoid removing in-use images"
  when: protected_images | length == 0

- name: Attempt to delete images not in protected versions (skip if containers reference them)
  block:
    - name: Check for containers using images (batch)
      command: docker ps -a --filter ancestor={{ item }} --format "{{'{{'}}.ID{{'}}'}}"
      loop: "{{ images_to_delete }}"
      register: containers_using_image_results
      changed_when: false
      failed_when: false

    - name: Delete image if no containers reference it
      command: "docker rmi {{ item.item }}"
      loop: "{{ containers_using_image_results.results | default([]) }}"
      when: item.stdout_lines | length == 0
      register: image_deletion_results
      failed_when: false
      loop_control:
        label: "{{ item.item }}"
  when: images_to_delete | length > 0 and protected_images | length > 0

- name: Read version files to remove for extracting image names (before deletion)
  slurp:
    src: "{{ item.path }}"
  register: removed_version_content
  loop: "{{ versions_to_remove }}"
  when: versions_to_remove | length > 0
  loop_control:
    label: "{{ item.path | basename }}"

- name: Extract image names from removed versions
  set_fact:
    removed_images: "{{ removed_version_content.results | map(attribute='content') | map('b64decode') | map('from_json') | map(attribute='images') | flatten | map(attribute='name') | list }}"
  when: versions_to_remove | length > 0 and removed_version_content.results is defined

- name: Remove corresponding rollback scripts for removed images
  file:
    path: "/var/lib/dockflow/{{ item.split(':')[0] }}___{{ item.split(':')[1] | default('latest') }}.run"
    state: absent
  loop: "{{ removed_images | default([]) }}"
  when: removed_images is defined and removed_images | length > 0
  loop_control:
    label: "{{ item.split(':')[0] }}___{{ item.split(':')[1] | default('latest') }}.run"

- name: Remove old version tracking files
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ versions_to_remove }}"
  when: versions_to_remove | length > 0
  loop_control:
    label: "{{ item.path | basename }}"

- name: Display cleanup summary
  debug:
    msg: |
      Cleanup Summary:
      - Removed {{ versions_to_remove | length }} old version tracking files
      - Deleted {{ image_deletion_results.results | default([]) | selectattr('changed', 'equalto', true) | list | length }} images
      - Kept {{ versions_to_keep | length }} healthy versions with {{ protected_images | length }} images
  when: not global_no_log
