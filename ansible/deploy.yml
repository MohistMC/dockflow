---
- name: Deploy Docker Images to Remote Server
  hosts: all:!localhost
  vars:    
    compose_path: "{{ lookup('env', 'ROOT_PATH') }}/.deployment/docker/docker-compose.yml"
    tmp_dir: "/tmp"
    global_no_log: "{{ not (lookup('env', 'FRAMEWORK_OPTIONS_ENABLE_DEBUG_LOGS') | default('false') | bool) }}"
    deploy_services: "{{ lookup('env', 'DEPLOY_DOCKER_SERVICES') | default('', true) }}"
    services_option: "{{ '--services=' + deploy_services if deploy_services else '' }}"
    environmentize_option: "{{ '--environmentize' if ((lookup('env', 'FRAMEWORK_OPTIONS_ENVIRONMENTIZE') | default('true', true)) | bool) else '' }}"
    remote_build: "{{ (lookup('env', 'FRAMEWORK_OPTIONS_REMOTE_BUILD') | default('false', true)) | bool }}"
    framework_version: "1.0.40-dev3"
    decomposerize_types:
      - name: "setup"
        base_options: "--create-networks --create-volumes --stop-and-remove"
        ignore_errors: yes  # Networks/volumes might already exist
      - name: "run"
        base_options: "--docker-run --docker-run-detach"
        ignore_errors: no
  pre_tasks:
    - name: Load environment variables from YAML file
      include_vars:
        file: /tmp/ansible_env_vars.yml
      no_log: "{{ global_no_log }}"

    - name: Set computed variables
      set_fact:
        sanitized_branch_name: "{{ branch_name | regex_replace('[^a-zA-Z0-9-]', '_') }}"
      when: branch_name is defined
      no_log: "{{ global_no_log }}"
    
    - name: Display Dockflow version
      debug:
        msg: "Dockflow v{{ framework_version }}"

    - name: Ensure rollback directory exists
      file:
        path: /var/lib/dockflow
        state: directory
        mode: '0755'
    
    - name: Check if config.yml exists
      stat:
        path: "{{ root_path }}/.deployment/config.yml"
      delegate_to: localhost
      register: config_file
      changed_when: false

    - name: Remove comments from config.yml before templating
      shell: |
        grep -v '^\s*#' "{{ root_path }}/.deployment/config.yml" > "{{ tmp_dir }}/config_clean.yml" || true
      delegate_to: localhost
      when: config_file.stat.exists
      changed_when: false

    - name: Render config.yml template with evaluated variables
      template:
        src: "{{ tmp_dir }}/config_clean.yml"
        dest: "{{ tmp_dir }}/config_rendered.yml"
      delegate_to: localhost
      when: config_file.stat.exists
      changed_when: false

    - name: Load deployment configuration from rendered template
      include_vars:
        file: "{{ tmp_dir }}/config_rendered.yml"
        name: deployment_config
      when: config_file.stat.exists
      ignore_errors: yes
  roles:
    - role: geerlingguy.docker
    - role: nginx
      tags:
        - nginx
    - role: private_ssh_keys
    - role: services
    - role: image-tracking
    - role: remote-build
      when: remote_build | bool
    - role: image-transfer
      when: not (remote_build | bool)
    - role: execute-scripts
  tasks:
    - name: Check if rollback is configured
      set_fact:
        rollback_configured: "{{ (deployment_config.health_checks.on_failure | default('notify')) == 'rollback' }}"
      when: deployment_config is defined and deployment_config.health_checks is defined

    - name: Process Docker commands for each type
      include_tasks: process_docker_commands.yml
      loop: "{{ decomposerize_types }}"
      loop_control:
        loop_var: cmd_type
      when: not (cmd_type.skip_on_rollback | default(false) and rollback_configured | default(false))

  post_tasks:
    - name: Set health checks configuration
      set_fact:
        health_checks_config: "{{ deployment_config.health_checks | default({}) }}"
      when: deployment_config is defined

    - name: Run health checks
      include_role:
        name: health-check
      when: health_checks_config is defined or (deployment_config.health_checks is defined)

    - name: Build list of newly deployed images for marking healthy
      set_fact:
        new_deployed_images: []
      changed_when: false

    - name: Populate new_deployed_images from aggregated docker run commands
      set_fact:
        new_deployed_images: "{{ new_deployed_images + [{'name': item.split() | last, 'timestamp': ansible_date_time.iso8601}] }}"
      loop: "{{ hostvars[inventory_hostname].get('all_docker_run_commands', []) }}"
      when: hostvars[inventory_hostname].get('all_docker_run_commands', []) | length > 0
      loop_control:
        label: "{{ item.split() | last }}"

    - name: Mark deployment as healthy if checks passed or disabled
      include_role:
        name: image-tracking
        tasks_from: mark_healthy
      vars:
        health_check_passed: "{{ (failed_health_checks | default([]) | length) == 0 }}"
      when: 
        - (failed_health_checks | default([]) | length) == 0 or not (health_checks_config.enabled | default(false))

    - name: Clean up old unhealthy images
      include_role:
        name: image-tracking
        tasks_from: cleanup
      when:
        - (failed_health_checks | default([]) | length) == 0 or not (health_checks_config.enabled | default(false))