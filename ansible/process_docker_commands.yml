- name: Initialize variables and build decomposerize options
  set_fact:
    decomposerize_options: "{{ cmd_type.base_options }} {{ services_option }} {{ environmentize_option }} --ansible-env-vars-format"
    all_docker_run_commands: "{{ all_docker_run_commands | default([]) }}"
  changed_when: false

- name: Generate {{ cmd_type.name }} commands as template
  shell: decomposerize "{{ compose_path }}" {{ decomposerize_options }} > {{ tmp_dir }}/decomposerize_{{ cmd_type.name }}.j2
  delegate_to: localhost
  changed_when: false

- name: Render template with evaluated variables
  template:
    src: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}.j2"
    dest: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}_rendered.sh"
  delegate_to: localhost
  changed_when: false

- name: Get rendered commands from controller
  slurp:
    src: "{{ tmp_dir }}/decomposerize_{{ cmd_type.name }}_rendered.sh"
  delegate_to: localhost
  register: rendered_script
  changed_when: false

- name: Split script into commands
  set_fact:
    current_commands: >-
      {{
        rendered_script.content
        | b64decode
        | split('\n')
        | map('trim')
        | select('truthy')
        | list
      }}
  changed_when: false
  when: rendered_script is defined

- name: Store docker run commands for rollback tracking
  set_fact:
    docker_run_commands: "{{ current_commands | select('search', '(?i)docker.*run') | list }}"
  when:
    - cmd_type.name == 'run'
    - current_commands is defined

- name: Aggregate all docker run commands in hostvars
  set_fact:
    all_docker_run_commands: "{{ (all_docker_run_commands | default([])) + (docker_run_commands | default([])) }}"
  when:
    - cmd_type.name == 'run'
    - docker_run_commands is defined

- name: Save current docker run commands for rollback (before deployment)
  copy:
    content: "{{ item }}"
    dest: "/var/lib/devops-framework/{{ (item.split() | last).split(':')[0] }}___{{ (item.split() | last).split(':')[1] | default('latest') }}.run"
    mode: '0755'
  loop: "{{ docker_run_commands | default([]) }}"
  when:
    - cmd_type.name == 'run'
    - docker_run_commands is defined
    - docker_run_commands | length > 0
  failed_when: false
  loop_control:
    label: "Saving rollback for: {{ item.split() | last }}"

- name: Execute commands on target host
  shell: "( {{ item }} ) > /dev/null 2>&1"
  loop: "{{ current_commands }}"
  failed_when: false
  ignore_errors: "{{ cmd_type.ignore_errors }}"
  register: command_results
  changed_when: command_results.rc == 0

- name: Show generic failure message for failed commands
  debug:
    msg: "Failed to run command"
  loop: "{{ command_results.results | default([]) }}"
  when:
    - item.rc is defined and item.rc != 0
    - not (cmd_type.ignore_errors | bool)
  changed_when: false
