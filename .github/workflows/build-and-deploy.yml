name: Build and Deploy

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
        description: "The tag to deploy, e.g. 1.0.0 or 1.0.0-staging"

env:
  DEVOPS_REPOSITORY_URL: https://github.com/Shawiizz/devops.git
  DEVOPS_FRAMEWORK_VERSION: 1.0.19

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy Docker images

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        id: vars
        run: |
          TAG="${{ inputs.tag }}"
          ENVIRONMENT="production"

          if [[ "$TAG" == *"-"* ]]; then
            ENVIRONMENT="${TAG##*-}"
          fi

          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          if [ ! -f "deployment/env/.env.${ENVIRONMENT}" ]; then
              echo "::error:: File deployment/env/.env.${ENVIRONMENT} does not exist, cannot execute on unknown environment"
              exit 1
          fi
          
          # Determine SSH key secret name
          SSH_SECRET_NAME="$(echo "${ENVIRONMENT}" | tr '[:lower:]' '[:upper:]')_SSH_PRIVATE_KEY"
          echo "SSH_KEY_SECRET_NAME=$SSH_SECRET_NAME" >> $GITHUB_ENV

      - name: Install docker-decompose
        run: npm i -g shawiizz-decomposerize

      - name: Clone devops repository
        run: git clone --branch "$DEVOPS_FRAMEWORK_VERSION" "$DEVOPS_REPOSITORY_URL" devops

      - name: Load environment variables
        run: |          
          # Load secrets as environment variables
          echo '${{ toJSON(secrets) }}' > secrets.json
          for key in $(jq -r 'keys[]' secrets.json); do
            value=$(jq -r --arg key "$key" '.[$key]' secrets.json)
            export "$key=$value"
          done
          
          while IFS= read -r line || [[ -n "$line" ]]; do
            [[ "$line" =~ ^[[:space:]]*#.*$ || -z "$line" ]] && continue
            [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]] && export "$line"
          done < <(cat "deployment/env/.env.${{ steps.vars.outputs.env }}"; echo)
          
          export ENV=${{ steps.vars.outputs.env }}
          export VERSION=${{ steps.vars.outputs.tag }}

      - name: Build Docker images
        run: |
          # Create temporary directory for docker images
          mkdir -p ./docker_images
          cd deployment/docker
          
          # Build images without saving to files
          BUILD_CMDS=$(decomposerize compose-deploy.yml --docker-build)
          
          # Execute build commands one by one
          while IFS= read -r BUILD_CMD; do
            echo "Running: $BUILD_CMD"
            eval "$BUILD_CMD"
          done <<< "$BUILD_CMDS"
          
          cd ../..

      - name: Setup SSH Key for Ansible
        run: |
          mkdir -p devops/ssh
          echo "${{ secrets[env.SSH_KEY_SECRET_NAME] }}" | tr -d '\r' > devops/ssh/remote_private_key
          chmod 600 devops/ssh/*
          eval "$(ssh-agent -s)"
          ssh-add devops/ssh/remote_private_key

      - name: Deploy with Ansible
        run: |
          cd devops
          export ANSIBLE_HOST_KEY_CHECKING=False
          export ANSIBLE_BECOME_PASSWORD=${{ secrets.ANSIBLE_BECOME_PASSWORD }}

          SKIP_TAGS="configure_host,image-transfer"
          if [ ! -d "../deployment/templates/nginx" ] || [ -z "$(ls -A ../deployment/templates/nginx 2>/dev/null)" ]; then
            echo "No nginx configuration found, skipping nginx role"
            SKIP_TAGS="${SKIP_TAGS},nginx"
          fi
          
          sed -i "s/REMOTE_HOST/${ENV}/g" ansible/inventory.yml
          ansible-galaxy role install geerlingguy.docker
          ansible-playbook ansible/deploy.yml -i ansible/inventory.yml --skip-tags "$SKIP_TAGS"
